{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-emilia-core-src-templates-project-query-tsx-content-file-path-content-projects-ars-aurea-index-mdx-1eee64f37c8a1dc96ebc.js","mappings":"sMAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,OAAQ,SACRC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,6BAA8B,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,ojBAAqjB,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,aAAcQ,EAAAA,cAAoBZ,EAAYK,EAAG,CAC3zBQ,KAAM,0DACL,cAAe,kEAAmE,KAAMD,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,OAAQ,KAAM,eAAgB,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,KAAM,KAAMK,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,uPAAwP,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,+MAAgN,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,6IAA8I,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,4RAA6R,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,4KAA6K,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,qKAAsK,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,wOAAyO,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,qLAAsL,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYM,OAAQ,KAAM,cAAe,KAAMM,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,sPAAuP,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,yQAA0Q,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,6KAA8K,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,gKAAiK,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,qNAAsN,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,gNAAiN,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,oOAAqO,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,gOAAiO,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,kQAAmQ,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,8OAA+O,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,8OAA+O,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,0NAA2N,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,kOAAmO,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,8OAA+O,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,yOAA0O,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,iQAAkQ,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,6PAA8P,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,4OAA6O,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,yPAA0P,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,iPAAkP,KAAMI,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,kQAAmQ,MAAO,KAAMI,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,+HAAgI,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,uRACl2Q,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWhB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UChBe,SAASiB,EAAiBjB,GACvC,OAAOa,EAAAA,cAAoBK,EAAAA,EAAkBlB,EAAOa,EAAAA,cAAoBM,EAAqBnB,GAC/F,CAHAkB,EAAAA,C,+LCiHA,MA1FsBE,IAAmE,IAADC,EAAAC,EAAA,IAAjE,MAAEC,EAAK,MAAEC,EAAK,YAAEC,EAAc,GAAE,KAAEC,GAA0BN,EACjF,MAAM,KAAEO,IAASC,EAAAA,EAAAA,KACXC,GAASC,EAAAA,EAAAA,gBAAc,aAUvBC,GAAaC,EAAAA,EAAAA,IAAU,CAC3BC,OAAQA,EAAAA,GAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAEzBE,GAAkBP,EAAAA,EAAAA,IAAU,CAChCC,OAAQA,EAAAA,GAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAEzBG,GAAYR,EAAAA,EAAAA,IAAU,CAAEC,OAAQA,EAAAA,GAAOC,KAAMO,MAAO,IAAKN,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAEpG,OACEM,EAAAA,EAAAA,GAACC,EAAAA,GAAI,CAACC,GAAG,SAASC,QAAQ,kBACxBH,EAAAA,EAAAA,GAACI,EAAAA,EAAgB,OACjBJ,EAAAA,EAAAA,GAACK,EAAAA,GAAS,CAACC,GAAI,CAAEC,UAAW,SAAUC,GAAI,EAAGC,OAAQ,MACnDT,EAAAA,EAAAA,GAACU,EAAAA,GAASC,IAAG,CAACC,MAAOf,IACnBG,EAAAA,EAAAA,GAACa,EAAAA,KAAI,CACHjB,GAAG,IACH,aAAY,GAAGX,uBACfqB,GAAI,CACFQ,QAAS,OACTC,WAAY,SACZC,MAAO,OACPC,eAAgB,OAChBC,IAAK,CACHC,WAAY,2DAEd,mBAAoB,CAAED,IAAK,CAAEvB,UAAW,wBAG1CK,EAAAA,EAAAA,GAACoB,EAAAA,EAAG,CAACC,GAAG,YAAYC,MAAM,KAAKC,OAAO,QACtCvB,EAAAA,EAAAA,GAAA,OACEM,GAAI,CACFkB,SAAU,SACVC,aAAc,OACdH,MAAO,OACPC,OAAQ,OACRT,QAAS,eACTY,UAAW,KACXC,GAAI,KAGLxC,SAAY,QAANR,EAANQ,EAAQyC,YAAI,IAAAjD,GAAiB,QAAjBC,EAAZD,EAAckD,uBAAe,IAAAjD,OAAvB,EAANA,EAA+BkD,mBAC9B9B,EAAAA,EAAAA,GAAC+B,EAAAA,EAAW,CAACC,MAAO7C,EAAOyC,KAAKC,gBAAgBC,gBAAiBG,IAAI,aAGzEjC,EAAAA,EAAAA,GAAA,QAAMM,GAAI,CAAE4B,WAAY,WAAajD,MAGzCe,EAAAA,EAAAA,GAAA,OAAKM,GAAI,CAAE6B,GAAI,EAAGC,GAAI,CAAC,EAAG,EAAG,MAC3BpC,EAAAA,EAAAA,GAACU,EAAAA,GAASC,IAAG,CAACC,MAAOvB,IACnBW,EAAAA,EAAAA,GAACqC,EAAAA,GAAO,CAACnC,GAAG,KAAKC,QAAQ,aACtBtB,KAGLmB,EAAAA,EAAAA,GAACU,EAAAA,GAASC,IAAG,CAACC,MAAOd,IACnBE,EAAAA,EAAAA,GAACsC,EAAAA,GAAO3E,EAAC,CAAC2C,GAAI,CAAE8B,GAAI,EAAGD,GAAI,IAAMnD,IACjCgB,EAAAA,EAAAA,GAAA,WACGlB,EAAMyD,IAAI,CAACC,EAAMC,KAChBzC,EAAAA,EAAAA,GAAC7B,EAAAA,SAAc,CAACuE,IAAKF,GAClBC,EAAQ,GAAK,KACbD,KAINzD,IACCiB,EAAAA,EAAAA,GAAA,OAAKM,GAAI,CAAEqC,SAAU,QAAShB,GAAI,OAAQQ,GAAI,EAAGxE,EAAG,CAAE4C,UAAW,OAAQqC,aAAc,gBACpF7D,Q,UCxCjB,MAtC0BL,IAAA,IAAC,KAAEmE,EAAI,KAAEC,GAA8BpE,EAAA,OAC/DsB,EAAAA,EAAAA,GAAA,OAAKM,GAAI,CAAE6B,GAAI,EAAGC,GAAI,KACpBpC,EAAAA,EAAAA,GAAA,OAAKM,GAAI,CAAEQ,QAAS,OAAQiC,oBAAqB,YAAahC,WAAY,SAAUqB,GAAI,KACtFpC,EAAAA,EAAAA,GAAA,MACEM,GAAI,CACFU,MAAO,YACPkB,WAAY,SACZc,cAAe,SACfC,cAAe,YACfC,SAAU,EACV1C,GAAI,IAEP,kBAGDR,EAAAA,EAAAA,GAAA,OAAKM,GAAI,CAAEgB,MAAO,OAAQC,OAAQ,MAAO4B,gBAAiB,aAE5DnD,EAAAA,EAAAA,GAAA,OACEM,GAAI,CACFQ,QAAS,OACTiC,oBAAqB,CAAC,MAAO,MAAO,WACpCK,QAAS,CAAC,EAAG,EAAG,GAChBxF,EAAG,CAAEyF,SAAU,YACf,6BAA8B,CAC5BA,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,KAIXZ,IAAQ7C,EAAAA,EAAAA,GAAC0D,EAAAA,EAAI,CAACC,KAAMd,IACpBC,IAAQ9C,EAAAA,EAAAA,GAAC0D,EAAAA,EAAI,CAACC,KAAMb,O,UCuB3B,MA1B4GpE,IAIrG,IAHLkF,MAAM,QAAEC,EAAO,OAAEC,GACjBC,aAAa,KAAElB,EAAI,KAAEC,GAAM,SAC3BkB,GACDtF,EACC,MAAMuF,GAAY3E,EAAAA,EAAAA,IAAU,CAAEC,OAAQA,EAAAA,GAAOC,KAAMO,MAAO,IAAKN,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAEpG,OACEM,EAAAA,EAAAA,GAACkE,EAAAA,EAAM,MACLlE,EAAAA,EAAAA,GAACmE,EAAa,CAACtF,MAAOgF,EAAQhF,MAAOE,YAAaiF,EAAUlF,MAAO+E,EAAQ/E,MAAOE,KAAM6E,EAAQ7E,QAChGgB,EAAAA,EAAAA,GAACK,EAAAA,GAAS,CAACC,GAAI,CAAE6B,GAAI,CAAC,QAAS,QAAS,WACrC2B,EAAOM,MAAM7B,IAAKP,IACjBhC,EAAAA,EAAAA,GAACU,EAAAA,GAASC,IAAG,CAAC+B,IAAKV,EAAM/C,KAAM2B,MAAOqD,IACpCjE,EAAAA,EAAAA,GAAC+B,EAAAA,EAAW,CACVC,MAAOA,EAAMH,gBAAgBC,gBAC7BG,IAAKD,EAAM/C,KACXqB,GAAI,CAAE8B,GAAI,CAAC,EAAG,EAAG,GAAIV,UAAW,WAItC1B,EAAAA,EAAAA,GAACqE,EAAiB,CAACxB,KAAMA,EAAMC,KAAMA,OAQtC,MAAMwB,EAAmCC,IAAA,IAAGX,MAAM,QAAEC,IAAWU,EAAA,OACpEvE,EAAAA,EAAAA,GAACwE,EAAAA,EAAG,CACF3F,MAAOgF,EAAQhF,MACfE,YAAa8E,EAAQY,QACrBC,SAAUb,EAAQc,KAClB3C,MAAO6B,EAAQe,MAAM/C,gBAAgBgD,OAAOC,OCvFjC,SAASC,EAAiBrG,GAAyE,OAAnEpB,GAAgEoB,EAC7G,OAAOP,EAAAA,cAAC6G,EAAY1H,EACtB,C","sources":["webpack://emilia/./content/projects/ars-aurea/index.mdx","webpack://emilia/./node_modules/@lekoarts/gatsby-theme-emilia-core/src/templates/project-query.tsx","webpack://emilia/./node_modules/@lekoarts/gatsby-theme-emilia/src/components/header-project.tsx","webpack://emilia/./node_modules/@lekoarts/gatsby-theme-emilia/src/components/project-pagination.tsx","webpack://emilia/./node_modules/@lekoarts/gatsby-theme-emilia/src/components/project.tsx","webpack://emilia/./node_modules/@lekoarts/gatsby-theme-emilia/src/@lekoarts/gatsby-theme-emilia-core/components/project.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"Asset s Store Link - SOON\"), \"\\n\", React.createElement(_components.p, null, \"20X Distortion Pro is a powerful collection of 20+ real-time distortion effects for Unity URP that will transform your scenes with mesmerizing glitches, warps, and stylized visual shocks. From datamosh-style trails and kaleidoscope tunnels to liquid melts and vortex swirls, this pack gives you an arsenal of eye-catching effects to elevate your game’s visuals. Whether you’re making a cyberpunk UI glitch, a trippy portal transition, or a dynamic gameplay effect, 20X Distortion Pro has you covered – fully optimized for mobile, WebGL, and high-end platforms.\"), \"\\n\", React.createElement(_components.p, null, \"Check out \", React.createElement(_components.a, {\n    href: \"https://seedo.itch.io/20x-distortion-pro-example-scene\"\n  }, \"Demo Scene\"), \" where you can see all effects and play with their parameters.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Features :\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"20 Unique Distortion Shaders: A diverse range of effects including glitchy pixel smears, fractal ripples, spiral warps, melting drips, prism RGB splits, speed streaks, kaleidoscopic swirls, and more.\\r\\nMix and match to create unlimited looks.\"), \"\\n\", React.createElement(_components.li, null, \"High Performance, Mobile-Ready: Optimized shaders ensure smooth performance on PC, consoles, mobile (iOS & Android), and WebGL. Achieve stunning effects with minimal overhead, even on lower-end hardware.\"), \"\\n\", React.createElement(_components.li, null, \"Easy Integration: Works out-of-the-box with Universal Render Pipeline (URP). Simply add the distortion effect Volume  no coding required.\"), \"\\n\", React.createElement(_components.li, null, \"Fully Customizable: Tweak numerous parameters for each effect (intensity, noise patterns, cell size, speed, chromatic aberration, etc.) to fine-tune the look. Many effects include mode variations (e.g. Voronoi Cells has Standard, Displace, Soft modes) to achieve different styles.\"), \"\\n\", React.createElement(_components.li, null, \"Demo Scenes & Documentation: Includes example scenes showcasing every effect with recommended settings. Clear documentation is provided, with tips on combining effects.\"), \"\\n\", React.createElement(_components.li, null, \"Unity 2021 + Support: Compatible with Unity 2021 LTS, 2022 LTS, 2023, and tested on the latest Unity Unity 6.0 releases. Future-proofed with Unity 6000+ support.\"), \"\\n\", React.createElement(_components.li, null, \"Multi-Platform Support: Works on Windows, macOS, Linux, Android, iOS, WebGL, and Console platforms. Developed and tested across DirectX, OpenGL/Vulkan, and Metal graphics APIs – ensuring consistent results everywhere Unity runs.\"), \"\\n\", React.createElement(_components.li, null, \"Full Source Included: All shaders (HLSL) and scripts are provided with the package. No black-box – you can inspect, learn from, and modify the code to suit your project’s needs.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Effects :\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Flow Mosh – Smears motion by sampling the previous frame, creating chunky datamosh glitch trails or smoother “liquid” drifts (configurable via threshold, noise, cell size). Includes an optional chroma shift for a subtle VHS-style color bleed.\"), \"\\n\", React.createElement(_components.li, null, \"Voronoi Cells – Cracks the view into shifting Voronoi cell shapes. Standard mode produces thin “broken glass” crack lines; Displace mode pushes each cell’s pixels for a shattered displacement; Soft mode adds a gentle wobbly distortion (à la spider-verse style).\"), \"\\n\", React.createElement(_components.li, null, \"Centered Fractal Distortion – Emits centered fractal noise that ripples outward from the screen’s center, warping pixels into wobbling, wave-like terraces as it expands.\"), \"\\n\", React.createElement(_components.li, null, \"Circular Ripple Warp – Twists the image into spiral vortex ripples, forming sweeping concentric arcs as if the scene were reflected in a spinning whirlpool.\"), \"\\n\", React.createElement(_components.li, null, \"Drip Melt Distortion – Liquefies the scene so that objects appear to melt and drip downward. Edges sag and stretch into smooth, melting ribbon-like strands, perfect for “heat melt” or surreal dissolve effects.\"), \"\\n\", React.createElement(_components.li, null, \"Fluid Noise Distortion – Applies a flowing, swirling noise field that bends the entire scene into smooth wave-like currents. Everything appears to ripple and fold fluidly, as if seen through moving water.\"), \"\\n\", React.createElement(_components.li, null, \"Fluid Worley Displacement – Uses Worley (cellular) noise to break the image into soft, bubbly cell patterns. This creates a foamy, speckled distortion that makes your scene look like it’s covered in a bubbling fluid texture.\"), \"\\n\", React.createElement(_components.li, null, \"Fractured Noise Displacement – Warps the image with a smooth noise function to create bubble-shaped lens distortions. Expect gentle bulging and ripple rings radiating outwards, like looking through shifting bubble glass.\"), \"\\n\", React.createElement(_components.li, null, \"Prismatic Displacement – Splits the RGB color channels and offsets them differently to produce a prismatic chromatic aberration effect. Creates colorful ghost edges, color channel misalignment, and flickering scan-line glitches for a cool RGB split look.\"), \"\\n\", React.createElement(_components.li, null, \"Radial Slice Shifter – Slices a wide diagonal band across the screen and shifts those pixels sideways. The result is a dramatic “cut-and-shift” stripe that sweeps across the view, as if part of the image is shearing off at high speed.\"), \"\\n\", React.createElement(_components.li, null, \"Recursive Vortex Warp – A radial pinch-style warp that squeezes the center of the image into a tight waist while flaring out the surroundings. The scene bends into an hourglass or tunnel shape, great for shockwave or teleport effects.\"), \"\\n\", React.createElement(_components.li, null, \"Sector Kaleido Distort – Wraps and mirrors the view into concentric kaleidoscope rings. The screen spirals inward, creating a dazzling tunnel of mirrored sectors (like looking into an infinite spiral kaleidoscope).\"), \"\\n\", React.createElement(_components.li, null, \"Smear Displacement – Smears moving parts of the image into rough, blocky trails. Fast motion gets “dragged out,” carving streaky, jittery gaps through the scene. Excellent for glitchy transition effects or conveying speed.\"), \"\\n\", React.createElement(_components.li, null, \"Speed Warp – Explodes the scene outward from the center into long streaks as if entering hyperspace. This speed-line burst effect makes it look like the camera is accelerating rapidly, stretching everything in the direction of motion.\"), \"\\n\", React.createElement(_components.li, null, \"Spiral Slice Kaleidoscope – Shreds the scene into multiple swirling ribbon-like strips that rotate around the center. As the strips twist and ripple, the image gets reassembled in a spiral pattern – a dynamic kaleidoscopic swirl.\"), \"\\n\", React.createElement(_components.li, null, \"Tiled Drift Distortion – Breaks the view into a grid of square tiles and gently drifts each tile in random directions. Creates a subtle jiggling/jittering effect across the screen, like the image is on sliding puzzle pieces that are slightly misaligned.\"), \"\\n\", React.createElement(_components.li, null, \"Twist Shrink Distortion – Peels off echoing “ghost” copies of the scene like glass tiles, each subsequent copy twisting and shrinking as it drifts away from the original. Produces a cascading hall-of-mirrors effect with diminishing tiled duplicates.\"), \"\\n\", React.createElement(_components.li, null, \"Vortex Pixel Shatter – Pulls every pixel towards the center into a spinning vortex, then flings them outward in jagged streaks. It’s like the image is sucked into a whirlpool and shattered, spraying pixel debris in a radial pattern.\"), \"\\n\", React.createElement(_components.li, null, \"Vortex Swirl Displacement – Overlays swirling, semi-transparent ribbon copies of the scene spiraling outward. The image bends into overlapping whirlpools, creating soft refractive distortions as though the screen itself is twisting into ribbons.\"), \"\\n\", React.createElement(_components.li, null, \"Worley Displacement – Utilizes cellular Worley noise to push pixels into layered, map-like ridges. The distortion looks like swirling bubbly terrain spreading over the scene – great for organic heat haze or underwater refractive effects.\"), \"\\n\", React.createElement(_components.li, null, \"Zigzag Jitter Displacement – Shifts rows of pixels in a back-and-forth sawtooth pattern. This creates a sharp zigzag wave that ripples through the scene, producing a stylized stepwise distortion (useful for electronic interference or cartoon shockwaves).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Each effect can be controlled with various parameters; combine multiple effects sequentially for even more complex visuals!\"), \"\\n\", React.createElement(_components.p, null, \"Bring your visuals to the next level with 20X Distortion Pro – whether you want subtle cinematic warping or wild glitch chaos, these effects will help your project stand out. Unlock limitless creative possibilities and wow your players with dynamic screen distortion effects!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/Users/debri/gatsby-starter-portfolio-emilia/content/projects/ars-aurea/index.mdx\";\nimport ProjectComponent, {Head} from \"../components/project\";\nProjectComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2283158628\";\n","/** @jsx jsx */\nimport * as React from \"react\"\nimport { Flex, jsx, Container, Heading } from \"theme-ui\"\nimport { Themed } from \"@theme-ui/mdx\"\nimport { animated, useSpring, config } from \"react-spring\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport HeaderBackground from \"./header-background\"\nimport useEmiliaConfig from \"../hooks/use-emilia-config\"\nimport Svg from \"./svg\"\n\ntype HeaderProjectProps = {\n  title: string\n  areas: string[]\n  description?: string\n  date: string\n}\n\ntype AvatarStaticQuery = {\n  file: {\n    childImageSharp: {\n      gatsbyImageData: IGatsbyImageData\n    }\n  }\n}\n\nconst HeaderProject = ({ title, areas, description = ``, date }: HeaderProjectProps) => {\n  const { name } = useEmiliaConfig()\n  const avatar = useStaticQuery<AvatarStaticQuery>(graphql`\n    query {\n      file(name: { eq: \"avatar\" }) {\n        childImageSharp {\n          gatsbyImageData(layout: FIXED, width: 40, height: 40, quality: 100)\n        }\n      }\n    }\n  `)\n\n  const titleProps = useSpring({\n    config: config.slow,\n    from: { opacity: 0, transform: `translate3d(0, -30px, 0)` },\n    to: { opacity: 1, transform: `translate3d(0, 0, 0)` },\n  })\n  const backButtonProps = useSpring({\n    config: config.slow,\n    from: { opacity: 0, transform: `translate3d(-30px, 0, 0)` },\n    to: { opacity: 1, transform: `translate3d(0, 0, 0)` },\n  })\n  const infoProps = useSpring({ config: config.slow, delay: 500, from: { opacity: 0 }, to: { opacity: 1 } })\n\n  return (\n    <Flex as=\"header\" variant=\"layout.header\">\n      <HeaderBackground />\n      <Container sx={{ textAlign: `center`, my: 4, zIndex: 10 }}>\n        <animated.div style={backButtonProps}>\n          <Link\n            to=\"/\"\n            aria-label={`${name} - Back to homepage`}\n            sx={{\n              display: `flex`,\n              alignItems: `center`,\n              color: `text`,\n              textDecoration: `none`,\n              svg: {\n                transition: `transform 0.25s cubic-bezier(0.455, 0.03, 0.515, 0.955)`,\n              },\n              \"&:hover, &:focus\": { svg: { transform: `translateX(-6px)` } },\n            }}\n          >\n            <Svg id=\"leftArrow\" width=\"20\" height=\"18\" />\n            <div\n              sx={{\n                overflow: `hidden`,\n                borderRadius: `full`,\n                width: `40px`,\n                height: `40px`,\n                display: `inline-block`,\n                boxShadow: `md`,\n                mx: 2,\n              }}\n            >\n              {avatar?.file?.childImageSharp?.gatsbyImageData && (\n                <GatsbyImage image={avatar.file.childImageSharp.gatsbyImageData} alt=\"Avatar\" />\n              )}\n            </div>\n            <span sx={{ fontWeight: `medium` }}>{name}</span>\n          </Link>\n        </animated.div>\n        <div sx={{ mt: 4, mb: [6, 6, 7] }}>\n          <animated.div style={titleProps}>\n            <Heading as=\"h1\" variant=\"styles.h1\">\n              {title}\n            </Heading>\n          </animated.div>\n          <animated.div style={infoProps}>\n            <Themed.p sx={{ mb: 0, mt: 4 }}>{date}</Themed.p>\n            <div>\n              {areas.map((area, index) => (\n                <React.Fragment key={area}>\n                  {index > 0 && `, `}\n                  {area}\n                </React.Fragment>\n              ))}\n            </div>\n            {description && (\n              <div sx={{ maxWidth: `900px`, mx: `auto`, mt: 5, p: { textAlign: `left`, overflowWrap: `break-word` } }}>\n                {description}\n              </div>\n            )}\n          </animated.div>\n        </div>\n      </Container>\n    </Flex>\n  )\n}\n\nexport default HeaderProject\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { IGatsbyImageData } from \"gatsby-plugin-image\"\nimport Card from \"./card\"\n\ntype ProjectPaginationProps = {\n  prev: {\n    slug: string\n    contentFilePath: string\n    title: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n  next: {\n    slug: string\n    contentFilePath: string\n    title: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n}\n\nconst ProjectPagination = ({ prev, next }: ProjectPaginationProps) => (\n  <div sx={{ mt: 6, mb: 4 }}>\n    <div sx={{ display: `grid`, gridTemplateColumns: `250px 1fr`, alignItems: `center`, mb: 4 }}>\n      <h2\n        sx={{\n          color: `textMuted`,\n          fontWeight: `medium`,\n          letterSpacing: `widest`,\n          textTransform: `uppercase`,\n          fontSize: 1,\n          my: 0,\n        }}\n      >\n        More Projects\n      </h2>\n      <div sx={{ width: `100%`, height: `2px`, backgroundColor: `muted` }} />\n    </div>\n    <div\n      sx={{\n        display: `grid`,\n        gridTemplateColumns: [`1fr`, `1fr`, `1fr 1fr`],\n        gridGap: [4, 4, 5],\n        a: { position: `relative` },\n        \"[data-name='card-overlay']\": {\n          position: `absolute`,\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        },\n      }}\n    >\n      {prev && <Card item={prev} />}\n      {next && <Card item={next} />}\n    </div>\n  </div>\n)\n\nexport default ProjectPagination\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { jsx, Container } from \"theme-ui\"\nimport { animated, useSpring, config } from \"react-spring\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport Layout from \"./layout\"\nimport HeaderProject from \"./header-project\"\nimport ProjectPagination from \"./project-pagination\"\nimport Seo from \"./seo\"\n\nexport type EmiliaProjectProps = {\n  project: {\n    excerpt: string\n    date: string\n    slug: string\n    title: string\n    areas: string[]\n    cover: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n  images: {\n    nodes: {\n      name: string\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }[]\n  }\n}\n\nexport type EmiliaProjectPageContext = {\n  prev: {\n    slug: string\n    contentFilePath: string\n    title: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n  next: {\n    slug: string\n    contentFilePath: string\n    title: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n}\n\nconst Project: React.FC<React.PropsWithChildren<PageProps<EmiliaProjectProps, EmiliaProjectPageContext>>> = ({\n  data: { project, images },\n  pageContext: { prev, next },\n  children,\n}) => {\n  const imageFade = useSpring({ config: config.slow, delay: 800, from: { opacity: 0 }, to: { opacity: 1 } })\n\n  return (\n    <Layout>\n      <HeaderProject title={project.title} description={children} areas={project.areas} date={project.date} />\n      <Container sx={{ mt: [`-6rem`, `-6rem`, `-8rem`] }}>\n        {images.nodes.map((image) => (\n          <animated.div key={image.name} style={imageFade}>\n            <GatsbyImage\n              image={image.childImageSharp.gatsbyImageData}\n              alt={image.name}\n              sx={{ mb: [4, 4, 5], boxShadow: `xl` }}\n            />\n          </animated.div>\n        ))}\n        <ProjectPagination prev={prev} next={next} />\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Project\n\nexport const Head: HeadFC<EmiliaProjectProps> = ({ data: { project } }) => (\n  <Seo\n    title={project.title}\n    description={project.excerpt}\n    pathname={project.slug}\n    image={project.cover.childImageSharp.resize.src}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Project, { Head, EmiliaProjectProps, EmiliaProjectPageContext } from \"../../../components/project\"\n\nexport default function EmiliaCoreProject({ ...props }: PageProps<EmiliaProjectProps, EmiliaProjectPageContext>) {\n  return <Project {...props} />\n}\n\nexport { Head }\n"],"names":["_createMdxContent","props","_components","Object","assign","h3","p","a","strong","ul","li","ol","_provideComponents","components","React","href","wrapper","MDXLayout","GatsbyMDXWrapper","ProjectComponent","GATSBY_COMPILED_MDX","_ref","_avatar$file","_avatar$file$childIma","title","areas","description","date","name","useEmiliaConfig","avatar","useStaticQuery","titleProps","useSpring","config","slow","from","opacity","transform","to","backButtonProps","infoProps","delay","jsx","Flex","as","variant","HeaderBackground","Container","sx","textAlign","my","zIndex","animated","div","style","Link","display","alignItems","color","textDecoration","svg","transition","Svg","id","width","height","overflow","borderRadius","boxShadow","mx","file","childImageSharp","gatsbyImageData","GatsbyImage","image","alt","fontWeight","mt","mb","Heading","Themed","map","area","index","key","maxWidth","overflowWrap","prev","next","gridTemplateColumns","letterSpacing","textTransform","fontSize","backgroundColor","gridGap","position","top","left","right","bottom","Card","item","data","project","images","pageContext","children","imageFade","Layout","HeaderProject","nodes","ProjectPagination","Head","_ref2","Seo","excerpt","pathname","slug","cover","resize","src","EmiliaCoreProject","Project"],"sourceRoot":""}